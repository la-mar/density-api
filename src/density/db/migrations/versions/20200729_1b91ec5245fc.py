""" create core tables:
        - spaces
        - doorways
        - dpus

Revision ID: 1b91ec5245fc
Revises:
Create Date: 2020-07-29 20:31:50.483993+00:00

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "1b91ec5245fc"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "spaces",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_spaces")),
        sa.UniqueConstraint("name", name=op.f("uq_spaces_name")),
    )
    op.create_index(
        op.f("ix_spaces_updated_at"), "spaces", ["updated_at"], unique=False
    )
    op.create_table(
        "doorways",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("ingress_space_id", sa.BigInteger(), nullable=True),
        sa.Column("egress_space_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["egress_space_id"],
            ["spaces.id"],
            name=op.f("fk_doorways_egress_space_id_spaces"),
        ),
        sa.ForeignKeyConstraint(
            ["ingress_space_id"],
            ["spaces.id"],
            name=op.f("fk_doorways_ingress_space_id_spaces"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_doorways")),
        sa.UniqueConstraint("name", name=op.f("uq_doorways_name")),
    )
    op.create_index(
        op.f("ix_doorways_updated_at"), "doorways", ["updated_at"], unique=False
    )
    op.create_table(
        "dpus",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("doorway_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["doorway_id"], ["doorways.id"], name=op.f("fk_dpus_doorway_id_doorways")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dpus")),
    )
    op.create_index(op.f("ix_dpus_updated_at"), "dpus", ["updated_at"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_dpus_updated_at"), table_name="dpus")
    op.drop_table("dpus")
    op.drop_index(op.f("ix_doorways_updated_at"), table_name="doorways")
    op.drop_table("doorways")
    op.drop_index(op.f("ix_spaces_updated_at"), table_name="spaces")
    op.drop_table("spaces")
    # ### end Alembic commands ###
